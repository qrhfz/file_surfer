openapi: 3.0.2
info:
  title: File Surfer API
  version: "1.0"
  description: File Surfer API
  contact:
    name: Qori El-Hafizh
    url: "https://www.qori.dev"
    email: contact@qori.dev
servers:
  - url: "http://localhost:3000"
tags:
  - name: auth
  - name: blob
  - name: clipboard
  - name: file
  - name: folder
  - name: search
  - name: user
paths:
  "/folder/{path}":
    get:
      operationId: get-folder
      summary: List contents inside a directory
      description: Open a folder and returns list of files and folders inside
      responses:
        "200":
          $ref: "#/components/responses/FolderContent"
      parameters: []
      tags:
        - folder
      security:
        - token: []
    parameters:
      - in: path
        required: true
        name: path
        schema:
          type: string
  "/file/{path}":
    get:
      summary: Your GET endpoint
      tags:
        - file
      responses:
        "200":
          description: Get File success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
      operationId: get-file
      description: returns file info. if type is text/* it will returns it content as content property
      security:
        - token: []
      parameters: []
    post:
      summary: ""
      operationId: post-file
      responses:
        "201":
          description: Creating new empty file success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
      tags:
        - file
      description: Create a new empty file
      parameters:
        - name: isDir
          in: query
          schema:
            type: boolean
          required: true
      security:
        - token: []
    parameters:
      - in: path
        required: true
        name: path
        schema:
          type: string
    patch:
      description: Rename a file
      summary: "Rename a file"
      operationId: patch-file
      responses:
        "200":
          description: "File renamed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
      tags:
        - file
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      parameters: []
      security:
        - token: []
    delete:
      summary: ""
      operationId: delete-file
      responses:
        "204":
          description: File deleted successfully
      description: Delete a file
      parameters: []
      tags:
        - file
      security:
        - token: []
  "/file/{path}/blob":
    get:
      tags:
        - blob
      summary: Your GET endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
      operationId: get-blob
      parameters: []
      description: Download file at given path
      security:
        - accessToken: []
    parameters:
      - schema:
          type: string
        name: path
        in: path
        required: true
  /search:
    get:
      summary: Your GET endpoint
      responses:
        "200":
          $ref: "#/components/responses/FolderContent"
      operationId: get-search
      description: Search file or folder in scoped folder
      security:
        - token: []
      parameters:
        - schema:
            type: string
          in: query
          name: path
          required: true
        - schema:
            type: string
          in: query
          name: searchQuery
          required: true
      tags:
        - search
  /copy:
    post:
      summary: ""
      operationId: post-copy
      responses:
        "201":
          description: "copy success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/File"
                  folders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Folder"
      description: Copy list of files and folders defined in sources to destination folder
      tags:
        - clipboard
      requestBody:
        $ref: "#/components/requestBodies/PasteRequest"
  /move:
    post:
      description: Move list of files and folders defined in sources to destination folder
      summary: ""
      operationId: post-move
      responses:
        "200":
          description: "move success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/File"
                  folders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Folder"
      tags:
        - clipboard
      requestBody:
        $ref: "#/components/requestBodies/PasteRequest"
  /upload:
    post:
      summary: ""
      operationId: upload
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/File"
      description: Upload a file to folder defined in path
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                path:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - path
                - files
      tags:
        - blob
      security:
        - token: []
      parameters: []
  /login:
    parameters: []
    post:
      summary: ""
      operationId: post-login
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: invalid username or password
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
              required:
                - username
                - password
      tags:
        - auth
  /access-token:
    get:
      summary: Your GET endpoint
      tags:
        - auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
      operationId: get-access-token
      description: Ask for token to access file download etc
      security:
        - token: []
    parameters: []
components:
  schemas:
    File:
      title: File
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          pattern: ^\w+\/\w+$
          example: text/plain
        location:
          type: string
        size:
          type: integer
          minimum: 0
        modified:
          type: string
          format: date-time
        url:
          type: string
      required:
        - name
        - type
        - location
        - size
        - modified
        - url
    Folder:
      title: Folder
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        modified:
          type: string
          format: date-time
        contentCount:
          type: integer
          minimum: 0
        url:
          type: string
      required:
        - name
        - location
        - modified
        - size
        - contentCount
        - url
    User:
      title: User
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        role:
          $ref: "#/components/schemas/Role"
      required:
        - id
        - username
        - role
    Role:
      title: Role
      type: string
      enum:
        - admin
        - regular
  securitySchemes:
    token:
      type: http
      scheme: bearer
    accessToken:
      name: accessToken
      type: apiKey
      in: query
  responses:
    FolderContent:
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  $ref: "#/components/schemas/File"
              folders:
                type: array
                items:
                  $ref: "#/components/schemas/Folder"
            required:
              - files
              - folders
  requestBodies:
    PasteRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              sources:
                type: array
                items:
                  type: string
              destination:
                type: string
