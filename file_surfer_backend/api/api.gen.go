// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AccessTokenScopes = "accessToken.Scopes"
	TokenScopes       = "token.Scopes"
)

// Defines values for Role.
const (
	Admin   Role = "admin"
	Regular Role = "regular"
)

// File defines model for File.
type File struct {
	Location string    `json:"location"`
	Modified time.Time `json:"modified"`
	Name     string    `json:"name"`
	Size     int       `json:"size"`
	Type     string    `json:"type"`
}

// Folder defines model for Folder.
type Folder struct {
	ContentCount int       `json:"contentCount"`
	Location     string    `json:"location"`
	Modified     time.Time `json:"modified"`
	Name         string    `json:"name"`
	Size         int       `json:"size"`
}

// Role defines model for Role.
type Role string

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Role     Role   `json:"role"`
	Username string `json:"username"`
}

// Base64PathParam defines model for Base64PathParam.
type Base64PathParam = string

// Error defines model for Error.
type Error struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// FolderContent defines model for FolderContent.
type FolderContent struct {
	Files   []File   `json:"files"`
	Folders []Folder `json:"folders"`
}

// GetFIleResponse defines model for GetFIleResponse.
type GetFIleResponse struct {
	Content *string `json:"content,omitempty"`
	Info    File    `json:"info"`
}

// SuccessMessage defines model for SuccessMessage.
type SuccessMessage struct {
	Success string `json:"success"`
}

// NewFileRequest defines model for NewFileRequest.
type NewFileRequest struct {
	IsDir bool   `json:"isDir"`
	Name  string `json:"name"`
}

// PasteRequest defines model for PasteRequest.
type PasteRequest struct {
	Destination *string   `json:"destination,omitempty"`
	Sources     *[]string `json:"sources,omitempty"`
}

// PostCopyJSONBody defines parameters for PostCopy.
type PostCopyJSONBody struct {
	Destination *string   `json:"destination,omitempty"`
	Sources     *[]string `json:"sources,omitempty"`
}

// PatchFileJSONBody defines parameters for PatchFile.
type PatchFileJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// PostFileJSONBody defines parameters for PostFile.
type PostFileJSONBody struct {
	IsDir bool   `json:"isDir"`
	Name  string `json:"name"`
}

// PostBlobMultipartBody defines parameters for PostBlob.
type PostBlobMultipartBody struct {
	Files [][]byte `json:"files"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMoveJSONBody defines parameters for PostMove.
type PostMoveJSONBody struct {
	Destination *string   `json:"destination,omitempty"`
	Sources     *[]string `json:"sources,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	Path        string `form:"path" json:"path"`
	SearchQuery string `form:"searchQuery" json:"searchQuery"`
}

// PatchUserIdJSONBody defines parameters for PatchUserId.
type PatchUserIdJSONBody struct {
	Password *string `json:"password,omitempty"`
	Role     *Role   `json:"role,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PostUserIdJSONBody defines parameters for PostUserId.
type PostUserIdJSONBody struct {
	Password string `json:"password"`
	Role     Role   `json:"role"`
	Username string `json:"username"`
}

// PostCopyJSONRequestBody defines body for PostCopy for application/json ContentType.
type PostCopyJSONRequestBody PostCopyJSONBody

// PatchFileJSONRequestBody defines body for PatchFile for application/json ContentType.
type PatchFileJSONRequestBody PatchFileJSONBody

// PostFileJSONRequestBody defines body for PostFile for application/json ContentType.
type PostFileJSONRequestBody PostFileJSONBody

// PostBlobMultipartRequestBody defines body for PostBlob for multipart/form-data ContentType.
type PostBlobMultipartRequestBody PostBlobMultipartBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostMoveJSONRequestBody defines body for PostMove for application/json ContentType.
type PostMoveJSONRequestBody PostMoveJSONBody

// PatchUserIdJSONRequestBody defines body for PatchUserId for application/json ContentType.
type PatchUserIdJSONRequestBody PatchUserIdJSONBody

// PostUserIdJSONRequestBody defines body for PostUserId for application/json ContentType.
type PostUserIdJSONRequestBody PostUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Your GET endpoint
	// (GET /access-token)
	GetAccessToken(ctx echo.Context) error

	// (POST /copy)
	PostCopy(ctx echo.Context) error

	// (DELETE /file/{path})
	DeleteFile(ctx echo.Context, path Base64PathParam) error
	// Your GET endpoint
	// (GET /file/{path})
	GetFile(ctx echo.Context, path Base64PathParam) error

	// (PATCH /file/{path})
	PatchFile(ctx echo.Context, path Base64PathParam) error

	// (POST /file/{path})
	PostFile(ctx echo.Context, path Base64PathParam) error
	// Your GET endpoint
	// (GET /file/{path}/blob)
	GetBlob(ctx echo.Context, path string) error

	// (POST /file/{path}/blob)
	PostBlob(ctx echo.Context, path string) error
	// Your GET endpoint
	// (GET /folder/{path})
	GetFolder(ctx echo.Context, path Base64PathParam) error

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (POST /move)
	PostMove(ctx echo.Context) error
	// Your GET endpoint
	// (GET /search)
	GetSearch(ctx echo.Context, params GetSearchParams) error

	// (DELETE /user/{id})
	DeleteUserId(ctx echo.Context, id string) error
	// Your GET endpoint
	// (GET /user/{id})
	GetUser(ctx echo.Context, id string) error

	// (PATCH /user/{id})
	PatchUserId(ctx echo.Context, id string) error

	// (POST /user/{id})
	PostUserId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessToken(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccessToken(ctx)
	return err
}

// PostCopy converts echo context to params.
func (w *ServerInterfaceWrapper) PostCopy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCopy(ctx)
	return err
}

// DeleteFile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path Base64PathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFile(ctx, path)
	return err
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path Base64PathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFile(ctx, path)
	return err
}

// PatchFile converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path Base64PathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFile(ctx, path)
	return err
}

// PostFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path Base64PathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFile(ctx, path)
	return err
}

// GetBlob converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlob(ctx, path)
	return err
}

// PostBlob converts echo context to params.
func (w *ServerInterfaceWrapper) PostBlob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBlob(ctx, path)
	return err
}

// GetFolder converts echo context to params.
func (w *ServerInterfaceWrapper) GetFolder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "path" -------------
	var path Base64PathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "path", runtime.ParamLocationPath, ctx.Param("path"), &path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFolder(ctx, path)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostMove converts echo context to params.
func (w *ServerInterfaceWrapper) PostMove(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMove(ctx)
	return err
}

// GetSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearch(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Required query parameter "searchQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "searchQuery", ctx.QueryParams(), &params.SearchQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchQuery: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSearch(ctx, params)
	return err
}

// DeleteUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserId(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// PatchUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUserId(ctx, id)
	return err
}

// PostUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/access-token", wrapper.GetAccessToken)
	router.POST(baseURL+"/copy", wrapper.PostCopy)
	router.DELETE(baseURL+"/file/:path", wrapper.DeleteFile)
	router.GET(baseURL+"/file/:path", wrapper.GetFile)
	router.PATCH(baseURL+"/file/:path", wrapper.PatchFile)
	router.POST(baseURL+"/file/:path", wrapper.PostFile)
	router.GET(baseURL+"/file/:path/blob", wrapper.GetBlob)
	router.POST(baseURL+"/file/:path/blob", wrapper.PostBlob)
	router.GET(baseURL+"/folder/:path", wrapper.GetFolder)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/move", wrapper.PostMove)
	router.GET(baseURL+"/search", wrapper.GetSearch)
	router.DELETE(baseURL+"/user/:id", wrapper.DeleteUserId)
	router.GET(baseURL+"/user/:id", wrapper.GetUser)
	router.PATCH(baseURL+"/user/:id", wrapper.PatchUserId)
	router.POST(baseURL+"/user/:id", wrapper.PostUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"buX9/OwsHS3wev3/AAAA//+j4A/5tiYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
