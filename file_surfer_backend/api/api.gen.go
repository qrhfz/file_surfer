// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AccessTokenScopes = "accessToken.Scopes"
	TokenScopes       = "token.Scopes"
)

// Defines values for Role.
const (
	Admin   Role = "admin"
	Regular Role = "regular"
)

// File defines model for File.
type File struct {
	Location *string    `json:"location,omitempty"`
	Modified *time.Time `json:"modified,omitempty"`
	Name     *string    `json:"name,omitempty"`
	Size     *int       `json:"size,omitempty"`
	Type     *string    `json:"type,omitempty"`
}

// Folder defines model for Folder.
type Folder struct {
	ContentCount *int       `json:"contentCount,omitempty"`
	Location     *string    `json:"location,omitempty"`
	Modified     *time.Time `json:"modified,omitempty"`
	Name         *string    `json:"name,omitempty"`
	Size         *int       `json:"size,omitempty"`
}

// Role defines model for Role.
type Role string

// User defines model for User.
type User struct {
	Id       *string `json:"id,omitempty"`
	Role     *Role   `json:"role,omitempty"`
	Username *string `json:"username,omitempty"`
}

// LocationPath defines model for LocationPath.
type LocationPath = string

// Error defines model for Error.
type Error struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FolderContent defines model for FolderContent.
type FolderContent struct {
	Files   *[]File   `json:"files,omitempty"`
	Folders *[]Folder `json:"folders,omitempty"`
}

// GetFIleResponse defines model for GetFIleResponse.
type GetFIleResponse struct {
	Content *string `json:"content,omitempty"`
	Info    File    `json:"info"`
}

// SuccessMessage defines model for SuccessMessage.
type SuccessMessage struct {
	Success *string `json:"success,omitempty"`
}

// NewFileRequest defines model for NewFileRequest.
type NewFileRequest struct {
	IsDir bool   `json:"isDir"`
	Name  string `json:"name"`
}

// GetBlobParams defines parameters for GetBlob.
type GetBlobParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// PostBlobMultipartBody defines parameters for PostBlob.
type PostBlobMultipartBody struct {
	Files [][]byte `json:"files"`
}

// PostBlobParams defines parameters for PostBlob.
type PostBlobParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// PostCopyJSONBody defines parameters for PostCopy.
type PostCopyJSONBody struct {
	Destination string   `json:"destination"`
	Sources     []string `json:"sources"`
}

// DeleteFileParams defines parameters for DeleteFile.
type DeleteFileParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// PatchFileJSONBody defines parameters for PatchFile.
type PatchFileJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// PatchFileParams defines parameters for PatchFile.
type PatchFileParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// PostFileJSONBody defines parameters for PostFile.
type PostFileJSONBody struct {
	IsDir bool   `json:"isDir"`
	Name  string `json:"name"`
}

// PostFileParams defines parameters for PostFile.
type PostFileParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// GetFolderParams defines parameters for GetFolder.
type GetFolderParams struct {
	Path LocationPath `form:"path" json:"path"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMoveJSONBody defines parameters for PostMove.
type PostMoveJSONBody struct {
	Destination string   `json:"destination"`
	Sources     []string `json:"sources"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	Path        string `form:"path" json:"path"`
	SearchQuery string `form:"searchQuery" json:"searchQuery"`
}

// PatchUserIdJSONBody defines parameters for PatchUserId.
type PatchUserIdJSONBody struct {
	Password *string `json:"password,omitempty"`
	Role     *Role   `json:"role,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PostUserIdJSONBody defines parameters for PostUserId.
type PostUserIdJSONBody struct {
	Password string `json:"password"`
	Role     Role   `json:"role"`
	Username string `json:"username"`
}

// PostBlobMultipartRequestBody defines body for PostBlob for multipart/form-data ContentType.
type PostBlobMultipartRequestBody PostBlobMultipartBody

// PostCopyJSONRequestBody defines body for PostCopy for application/json ContentType.
type PostCopyJSONRequestBody PostCopyJSONBody

// PatchFileJSONRequestBody defines body for PatchFile for application/json ContentType.
type PatchFileJSONRequestBody PatchFileJSONBody

// PostFileJSONRequestBody defines body for PostFile for application/json ContentType.
type PostFileJSONRequestBody PostFileJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostMoveJSONRequestBody defines body for PostMove for application/json ContentType.
type PostMoveJSONRequestBody PostMoveJSONBody

// PatchUserIdJSONRequestBody defines body for PatchUserId for application/json ContentType.
type PatchUserIdJSONRequestBody PatchUserIdJSONBody

// PostUserIdJSONRequestBody defines body for PostUserId for application/json ContentType.
type PostUserIdJSONRequestBody PostUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Your GET endpoint
	// (GET /access-token)
	GetAccessToken(ctx echo.Context) error
	// Your GET endpoint
	// (GET /blob)
	GetBlob(ctx echo.Context, params GetBlobParams) error

	// (POST /blob)
	PostBlob(ctx echo.Context, params PostBlobParams) error

	// (POST /copy)
	PostCopy(ctx echo.Context) error

	// (DELETE /file)
	DeleteFile(ctx echo.Context, params DeleteFileParams) error
	// Your GET endpoint
	// (GET /file)
	GetFile(ctx echo.Context, params GetFileParams) error

	// (PATCH /file)
	PatchFile(ctx echo.Context, params PatchFileParams) error

	// (POST /file)
	PostFile(ctx echo.Context, params PostFileParams) error
	// Your GET endpoint
	// (GET /folder)
	GetFolder(ctx echo.Context, params GetFolderParams) error

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (POST /move)
	PostMove(ctx echo.Context) error
	// Your GET endpoint
	// (GET /search)
	GetSearch(ctx echo.Context, params GetSearchParams) error

	// (DELETE /user/{id})
	DeleteUserId(ctx echo.Context, id string) error
	// Your GET endpoint
	// (GET /user/{id})
	GetUser(ctx echo.Context, id string) error

	// (PATCH /user/{id})
	PatchUserId(ctx echo.Context, id string) error

	// (POST /user/{id})
	PostUserId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessToken(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccessToken(ctx)
	return err
}

// GetBlob converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlob(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlobParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlob(ctx, params)
	return err
}

// PostBlob converts echo context to params.
func (w *ServerInterfaceWrapper) PostBlob(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBlobParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBlob(ctx, params)
	return err
}

// PostCopy converts echo context to params.
func (w *ServerInterfaceWrapper) PostCopy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCopy(ctx)
	return err
}

// DeleteFile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFile(ctx, params)
	return err
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFile(ctx, params)
	return err
}

// PatchFile converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchFile(ctx, params)
	return err
}

// PostFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostFile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFile(ctx, params)
	return err
}

// GetFolder converts echo context to params.
func (w *ServerInterfaceWrapper) GetFolder(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFolderParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFolder(ctx, params)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostMove converts echo context to params.
func (w *ServerInterfaceWrapper) PostMove(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMove(ctx)
	return err
}

// GetSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearch(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Required query parameter "searchQuery" -------------

	err = runtime.BindQueryParameter("form", true, true, "searchQuery", ctx.QueryParams(), &params.SearchQuery)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter searchQuery: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSearch(ctx, params)
	return err
}

// DeleteUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserId(ctx, id)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// PatchUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUserId(ctx, id)
	return err
}

// PostUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/access-token", wrapper.GetAccessToken)
	router.GET(baseURL+"/blob", wrapper.GetBlob)
	router.POST(baseURL+"/blob", wrapper.PostBlob)
	router.POST(baseURL+"/copy", wrapper.PostCopy)
	router.DELETE(baseURL+"/file", wrapper.DeleteFile)
	router.GET(baseURL+"/file", wrapper.GetFile)
	router.PATCH(baseURL+"/file", wrapper.PatchFile)
	router.POST(baseURL+"/file", wrapper.PostFile)
	router.GET(baseURL+"/folder", wrapper.GetFolder)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/move", wrapper.PostMove)
	router.GET(baseURL+"/search", wrapper.GetSearch)
	router.DELETE(baseURL+"/user/:id", wrapper.DeleteUserId)
	router.GET(baseURL+"/user/:id", wrapper.GetUser)
	router.PATCH(baseURL+"/user/:id", wrapper.PatchUserId)
	router.POST(baseURL+"/user/:id", wrapper.PostUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZhonAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
