openapi: 3.1.0
x-stoplight:
  id: 8tzokrxv22c0w
info:
  title: File Surfer API
  version: '1.0'
  description: File Surfer API
  contact:
    name: Qori El-Hafizh
    url: 'https://www.qori.dev'
    email: contact@qori.dev
servers:
  - url: 'http://localhost:3000'
paths:
  /folder:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          $ref: '#/components/responses/FolderContent'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-folder
      description: Open a folder and returns list of files and folders inside
      parameters:
        - $ref: '#/components/parameters/LocationPath'
      tags:
        - folder
      security:
        - token: []
    parameters: []
  /file:
    get:
      summary: Your GET endpoint
      tags:
        - file
      responses:
        '200':
          $ref: '#/components/responses/GetFIleResponse'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-file
      description: returns file info. if type is text/* it will returns it content as content property
      security:
        - token: []
      parameters:
        - $ref: '#/components/parameters/LocationPath'
    post:
      summary: ''
      operationId: post-file
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      tags:
        - file
      description: create new empty file
      parameters:
        - $ref: '#/components/parameters/LocationPath'
      security:
        - token: []
      requestBody:
        $ref: '#/components/requestBodies/NewFileRequest'
    parameters: []
    delete:
      summary: ''
      operationId: delete-file
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      description: Delete file
      parameters:
        - $ref: '#/components/parameters/LocationPath'
      tags:
        - file
      security:
        - token: []
    patch:
      summary: ''
      operationId: patch-file
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      description: rename file name
      tags:
        - file
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      parameters:
        - $ref: '#/components/parameters/LocationPath'
      security:
        - token: []
  /blob:
    get:
      tags:
        - blob
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-blob
      parameters:
        - $ref: '#/components/parameters/LocationPath'
      description: Download file at given path
      security:
        - accessToken: []
    post:
      summary: ''
      operationId: post-blob
      responses:
        '201':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      description: Upload a file to folder defined in path
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              format: binary
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: byte
              required:
                - files
      tags:
        - blob
      security:
        - token: []
      parameters:
        - $ref: '#/components/parameters/LocationPath'
    parameters: []
  /login:
    parameters: []
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: invalid username or password
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
              required:
                - username
                - password
      tags:
        - auth
  '/user/{id}':
    get:
      summary: Your GET endpoint
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-user
      description: Get user info
      security:
        - token: []
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: ''
      operationId: post-user-id
      responses:
        '201':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      description: create new user
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  $ref: '#/components/schemas/Role'
              required:
                - username
                - password
                - role
      security:
        - token: []
    patch:
      summary: ''
      operationId: patch-user-id
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      description: rename or change password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  $ref: '#/components/schemas/Role'
      security:
        - token: []
      tags:
        - user
    delete:
      summary: ''
      operationId: delete-user-id
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessage'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      tags:
        - user
      description: delete user
      security:
        - token: []
  /search:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          $ref: '#/components/responses/FolderContent'
        '400':
          $ref: '#/components/responses/Error'
      operationId: get-search
      description: Search file or folder in scoped folder
      security:
        - token: []
      parameters:
        - schema:
            type: string
          in: query
          name: path
          required: true
        - schema:
            type: string
          in: query
          name: searchQuery
          required: true
      tags:
        - search
  /copy:
    post:
      summary: ''
      operationId: post-copy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  type: array
                  items:
                    type: string
                destination:
                  type: string
              required:
                - sources
                - destination
      description: Copy list of files and folders defined in sources to destination folder
      tags:
        - clipboard
  /move:
    post:
      summary: ''
      operationId: post-move
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      description: Move list of files and folders defined in sources to destination folder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  type: array
                  items:
                    type: string
                destination:
                  type: string
              required:
                - sources
                - destination
      tags:
        - clipboard
  /access-token:
    get:
      summary: Your GET endpoint
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '403':
          $ref: '#/components/responses/Error'
      operationId: get-access-token
      description: Ask for token to access file download etc
      security:
        - token: []
    parameters: []
components:
  schemas:
    File:
      title: File
      x-stoplight:
        id: u03wzz8mvta0u
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          pattern: ^\w+\/\w+$
          example: text/plain
        location:
          type: string
        size:
          type: integer
          minimum: 0
        modified:
          type: string
          format: date-time
      required:
        - name
        - type
        - location
        - size
        - modified
    Folder:
      title: Folder
      x-stoplight:
        id: 3leln1kmm2kki
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        modified:
          type: string
          format: date-time
        size:
          type: integer
          minimum: 0
        contentCount:
          type: integer
          minimum: 0
      required:
        - name
        - location
        - modified
        - size
        - contentCount
    User:
      title: User
      x-stoplight:
        id: 4fjnlr1gx5ikq
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
        - id
        - username
        - role
    Role:
      title: Role
      x-stoplight:
        id: xyqmr13no52bc
      type: string
      enum:
        - admin
        - regular
  securitySchemes:
    token:
      type: http
      scheme: bearer
    accessToken:
      name: accessToken
      type: apiKey
      in: query
  parameters:
    LocationPath:
      name: path
      in: query
      schema:
        type: string
      required: true
  responses:
    FolderContent:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  $ref: '#/components/schemas/File'
              folders:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
            required:
              - files
              - folders
    Error:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            required:
              - error
              - message
          examples:
            Example 1:
              value:
                error: string
                message: string
    SuccessMessage:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: string
            required:
              - success
          examples:
            Example 1:
              value:
                success: File renamed successfully
    GetFIleResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                $ref: '#/components/schemas/File'
              content:
                type: string
            required:
              - info
  requestBodies:
    NewFileRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              isDir:
                type: boolean
            required:
              - name
              - isDir
      description: ''
tags:
  - name: auth
  - name: blob
  - name: clipboard
  - name: file
  - name: folder
  - name: search
  - name: user
